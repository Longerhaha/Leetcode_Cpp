class Solution {
public:
    void DFS(vector<vector<int>>& Graph, vector<bool>& visit, vector<bool>& infection, int node, int& M){
        for( int i = 0; i < Graph.size(); i++ ){
            //cout << Graph[node][i] << endl;
            if(Graph[node][i] && !visit[i]) {
                infection[i] = true;
                M++;
                visit[i] = true;
                DFS(Graph, visit, infection, i, M);
            }
        }
        
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int initial_len = initial.size();
        int graph_node_size = graph.size();
        if(initial_len == 1) return initial[0];
        //初始化最小的 M
        int min_M = graph_node_size;
        int min_M_initial_idx = -1;
        for( int i = 0; i < initial_len; i++ ){
            vector<bool> visit(graph_node_size, false);
            vector<bool> infection(graph_node_size, false);
            vector<vector<int>> Graph(graph);
            for( int j = 0; j < graph_node_size; j++ ){
                //去除节点 initial[i] 与其他节点之间的连接
                if(Graph[initial[i]][j]){
                    Graph[initial[i]][j] = false;
                    Graph[j][initial[i]] = false;
                }
            }
            for( int j = 0; j < initial_len; j++ ){
                if(j != i) infection[initial[j]] = true;
            }
            
            int M = 0;
            for( int j = 0; j < initial_len; j++ ){
                if(j != i && !visit[initial[j]]){
                    M++;
                    visit[initial[j]] = true;
                    DFS(Graph, visit, infection, initial[j], M);
                }
            }
            //cout << i << " " << M << endl;
            if(min_M > M) min_M = M, min_M_initial_idx = i;
            else if(min_M == M) min_M_initial_idx = initial[min_M_initial_idx] > initial[i] ? i : min_M_initial_idx;
        }
        return initial[min_M_initial_idx];
    }
};