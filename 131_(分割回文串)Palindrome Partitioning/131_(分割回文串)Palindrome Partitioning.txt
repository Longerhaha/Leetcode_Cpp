class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> path;
        partition_dfs(ans, path, s, 0);
        return ans;
    }
    
    /*
     * DFS
     * 搜索从start位置到s.size()所有可能的回文字符串p
     *     深搜p的下一个位置
     */
    void partition_dfs(vector<vector<string>>& ans, vector<string>& path, string& s, int start){
        if(start == s.size()){
            ans.push_back(path);
            return ;
        }
        for( int i = start; i < s.size(); i++ ){
            if(isPalindrome(s.substr(start, i + 1 -start))){
                //std::cout<<s.substr(start, i + 1 -start)<<std::endl;
                path.push_back(s.substr(start, i + 1 -start));
                partition_dfs(ans, path, s, i + 1);
                path.pop_back();
            }
        }
    }
    
    /*
     * 判断是否是回文
     */
    int isPalindrome(string s){
        int start = 0, end = s.size() - 1;
        while(start < end){
            if(s[start] != s[end])
                return 0;
            else
                start++, end--;
        }
        return 1;
    }
};